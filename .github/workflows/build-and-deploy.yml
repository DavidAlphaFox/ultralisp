name: Build And Deploy

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # schedule:
  #  - cron: '33 4 * * *'
  push:
    # branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  # pull_request:
  #   branches: [ "master" ]
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        description: 'Version number to build'
        default: 'v0.1.0'
        required: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        if: ${{ github.event_name == 'push' }}
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata for sbcl-app
        id: meta-sbcl-app
        if: ${{ github.event_name == 'push' }}
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-sbcl-app
          
      - name: Extract Docker metadata for sbcl-worker
        id: meta-sbcl-worker
        if: ${{ github.event_name == 'push' }}
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-sbcl-worker

      - name: Extract Docker metadata for lw-worker
        id: meta-lw-worker
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-lw-worker

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push sbcl-app
        id: build-and-push-sbcl-app
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          target: sbcl-app
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-sbcl-app.outputs.tags }}
          labels: ${{ steps.meta-sbcl-app.outputs.labels }}

      - name: Build and push sbcl-worker
        id: build-and-push-sbcl-worker
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          target: sbcl-worker
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-sbcl-worker.outputs.tags }}
          labels: ${{ steps.meta-sbcl-worker.outputs.labels }}

      - name: Prepare LispWorks compiler
        if: ${{ github.event_name == 'push' }}
        run: |
          mkdir lw
          echo "${{ secrets.LISPWORKS_LICENSE }}" > lw/license
          curl https://storage.yandexcloud.net/ultralisp-ci/dist-lw80.tar.bz2 | tar jx
        
      - name: Build and push lw-worker
        id: build-and-push-lw-worker
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          target: lw-worker
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-lw-worker.outputs.tags }}
          labels: ${{ steps.meta-lw-worker.outputs.labels }}

      - name: Determine version to deploy
        id: version-to-deploy
        run: |
          # This workflow is triggered either by a version tag or
          # manually. Thus, the latest tag will be always a version number.
          manual_version="${{ inputs.version }}"

          if [ -z "${manual_version}" ]
          then
            version_to_deploy=$(git describe --tags `git rev-list --tags --max-count=1`)
          else
            version_to_deploy="${manual_version}"
          fi

          echo "Going to deploy '${version_to_deploy}' version."
          echo "::set-output name=version::${version_to_deploy}"


      - name: Deploy to production
        uses: svetlyak40wt/ansible-playbook-docker-action@master
        env:
          ANSIBLE_STDOUT_CALLBACK: debug
          ANSIBLE_FORCE_COLOR: true
        with:
          playbookName: ".ansible/playbooks/ultralisp.yml"
          inventoryFile: ".ansible/inventory/hosts.yml"
          keyFile: ".ansible/deploy"
          keyFileVaultPass: ${{ secrets.ANSIBLE_SSH_KEY_PASS }}
          extraVars: "-e ultralisp_version=${{ steps.version-to-deploy.outputs.version }}"
          # Warning: enabling this option lead to secrets leak
          # into the GH logs:
          # verbosity: "vvv"
